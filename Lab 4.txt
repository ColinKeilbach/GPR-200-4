// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

float sq(float x) {
    return x * x;
}

//this squares the value 5 times
//2^2     = 4
//4^2     = 16
//16^2    = 256
//256^2   = 65536
//65536^2 = 4294967296
float sq_5(float x) {
    return sq(sq(sq(sq(sq(x)))));
}

float lenSq(vec2 x) {
    return dot(x, x);
}

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}


struct sSphere {
    float radius;
    vec4 center;
};
    
void initSphere(out sSphere sphere, in vec3 center, in float radius) {
    sphere.center = asPoint(center);
    sphere.radius = radius;
}

struct pointLight {
    vec4 center;
    vec4 color;
    float intensity;
};
    
void initLight(out pointLight light, in vec4 center, in vec4 color, in float intensity) {
    light.center = center;
    light.color = color;
    light.intensity = intensity;
}

//Calculates light values
void lightCalc(out float lightingIntensity, out float specularIntensity, in sSphere sphere, in pointLight light, in vec3 normal, in vec3 position, in vec3 viewport) {
    //This gets the vector direction from the light to the point on the sphere surface
    vec3 direction = vec3(position.x - light.center.x, position.y - light.center.y, position.z - light.center.z);
	
    //Calculate specular light
    vec3 halfwayVector = normalize(direction - viewport); //lightVector - viewVector
    
    float specularCoefficient = dot(normal, halfwayVector); //average of the surface normal and halfwayVector
    
    //Return specular light
    specularIntensity = sq_5(specularCoefficient); //sq_5 so that specular light is more focused
    
    
    //Calculate diffuse light
    float dist = sqrt(sq(direction.x) + sq(direction.y) + sq(direction.z)); //distance from surface to light
    
    vec3 lightNormal = normalize(light.center.xyz - position); //center of the light - surface
    
    float diffuseCoefficient = max(0.0, dot(normal, lightNormal)); //max so it cannot be negative
    
    float attenuatedIntensity = 1.0 / (1.0 + dist / light.intensity + sq(dist) / sq(light.intensity)); //This makes the light less intense
    
    //Return diffuse light
    lightingIntensity = diffuseCoefficient * attenuatedIntensity;
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in vec3 viewport)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
	
    //SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -5.0), 0.5);
    
    //This creates the first light
    pointLight light;
    initLight(light, vec4(5.0, 5.0, 2.5, 0.0), vec4(1.0), 20.0);
    
    //This creates the second light
    pointLight light2;
    initLight(light2, vec4(-1.0, -5.0, 2.5, 0.0), vec4(1.0), 10.0);
    
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSq(dp.xy), rSq = sq(sphere.radius);
    
    if (lSq <= rSq) {
        //return vec4(0.0, 1.0, 1.0, 1.0);
        
        // actually dz_sq for now
        dp.z = rSq - lSq;
        
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = //normalize(position - sphere.center.xyz);
            (position - sphere.center.xyz) / sphere.radius;//this is more efficient because we already know the length
        
        vec4 color = vec4(normal * 0.5 + 0.5, 1.0);
        
        float lightIntensity, specularIntensity, lightIntensity2, specularIntensity2;
        //return color;
        
        //This calculates the values for the lights
        lightCalc(lightIntensity, specularIntensity, sphere, light, normal, position, viewport);
        lightCalc(lightIntensity2, specularIntensity2, sphere, light2, normal, position, viewport);
        
        vec4 returnColor = vec4(0.0);
        
        //This adds the lights color values to the final color
        returnColor += (lightIntensity * light.color + specularIntensity * light.color);
        returnColor += (lightIntensity2 * light2.color + specularIntensity2 * light2.color);
        
        //This returns the lights multiplied by the sphere color
        return returnColor * color;
    }
    
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.5);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin, viewport);
}
